{"version":3,"sources":["logo.svg","GoogleTranslatelogo.svg.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","lang","setLang","undefined","locale","setLocale","useEffect","a","fetch","resp","json","data","messages","className","src","logo","alt","translate","value","onChange","evt","target","id","defaultMessage","href","rel","Date","year","month","day","weekday","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,MAA0B,iCCA1B,MAA0B,oD,uCCqE1BA,MA/Df,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNC,EADM,KACAC,EADA,OAEeF,wBAASG,GAFxB,mBAENC,EAFM,KAEEC,EAFF,KAUb,OANAC,oBAAS,sBAAC,8BAAAC,EAAA,sEACWC,MAAM,UAAD,OAAWP,EAAX,UADhB,cACFQ,EADE,gBAEWA,EAAKC,OAFhB,OAEFC,EAFE,OAGRN,EAAUM,GAHF,2CAIR,CAACV,IAGD,cAAC,IAAD,CACEG,OAAQA,EACRQ,SAAUR,EAFZ,SAIE,qBAAKS,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,qBAAKH,UAAU,oBAAf,SAAmC,qBAAKC,IAAKG,EAAWJ,UAAU,YAAYG,IAAI,mBAEpF,8BACE,yBACEE,MAAOjB,EACPkB,SAAU,SAACC,GACTlB,EAAQkB,EAAIC,OAAOH,QAHvB,UAME,wBAAQA,MAAM,KAAd,qBACA,wBAAQA,MAAM,KAAd,0BACA,wBAAQA,MAAM,KAAd,yBACA,wBAAQA,MAAM,KAAd,qCAGJ,4BACE,cAAC,IAAD,CACEI,GAAG,aACHC,eAAe,0CAGnB,mBACEV,UAAU,WACVW,KAAK,sBACLH,OAAO,SACPI,IAAI,sBAJN,SAME,cAAC,IAAD,CAAkBH,GAAG,cAAcC,eAAe,kBAEpD,4BACE,cAAC,IAAD,CACEL,MAAO,IAAIQ,KACXC,KAAK,UACLC,MAAM,OACNC,IAAI,UACJC,QAAQ,mBChDPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.12df84e6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/GoogleTranslatelogo.svg.426ae246.png\";","import logo from \"./logo.svg\";\nimport translate from \"./GoogleTranslatelogo.svg.png\";\nimport \"./App.css\";\nimport React, { useState, useEffect } from 'react'\nimport { FormattedMessage, IntlProvider, FormattedDate } from \"react-intl\";\n\nfunction App() {\n  const [lang, setLang] = useState('en')\n  const [locale, setLocale] = useState(undefined)\n\n  useEffect(async() => {\n    const resp = await fetch(`./lang/${lang}.json`)\n    const data = await resp.json()\n    setLocale(data)\n  },[lang])\n\n  return (\n    <IntlProvider \n      locale={locale}\n      messages={locale}\n    >\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"flex-center\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <div className=\"translate-wrapper\"><img src={translate} className=\"translate\" alt=\"translate\" /></div>\n          </div>\n          <div>\n            <select\n              value={lang}\n              onChange={(evt) => {\n                setLang(evt.target.value);\n              }}\n            >\n              <option value=\"en\">English</option>\n              <option value=\"cn\">中文</option>\n              <option value=\"fr\">Français</option>\n              <option value=\"jp\">日本語</option>\n            </select>\n          </div>\n          <p>\n            <FormattedMessage\n              id=\"app.header\"\n              defaultMessage=\"Edit src/App.js and save to reload.\"\n            />\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <FormattedMessage id=\"app.content\" defaultMessage=\"Learn React\" />\n          </a>\n          <p>            \n            <FormattedDate\n              value={new Date()}\n              year=\"numeric\"\n              month=\"long\"\n              day=\"numeric\"\n              weekday=\"long\"\n            />\n          </p>\n        </header>\n      </div>\n    </IntlProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}